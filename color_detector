import webcolors
import time
import pyttsx3
import cv2
import numpy as np
import RPi.GPIO as GPIO
import sys
import pygame
from sklearn.cluster import KMeans
start = time.time()

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO.setup(10, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(8, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(12, GPIO.OUT)
GPIO.setup(14, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
engine = pyttsx3.init()
engine.setProperty("rate", 115)
engine.setProperty("volume", 1)

status = 0


def make_histogram(cluster):
    num_labels = np.arange(0, len(np.unique(cluster.labels_)) + 1)
    hist, _ = np.histogram(cluster.labels_, bins=num_labels)
    hist = hist.astype('float32')
    hist /= hist.sum()
    return hist


def make_bar(height, width, color):
    bar = np.zeros((height, width, 3), np.uint8)
    bar[:] = color
    red, green, blue = int(color[2]), int(color[1]), int(color[0])
    hsv_bar = cv2.cvtColor(bar, cv2.COLOR_BGR2HSV)
    hue, sat, val = hsv_bar[0][0]
    return bar, (red, green, blue), (hue, sat, val)


def sort_hsvs(hsv_list):
    bars_with_indexes = []
    for index, hsv_val in enumerate(hsv_list):
        bars_with_indexes.append((index, hsv_val[0], hsv_val[1], hsv_val[2]))
    bars_with_indexes.sort(key=lambda elem: (elem[1], elem[2], elem[3]))
    return [item[0] for item in bars_with_indexes]


def closest_colour(requested_colour):
    min_colours = {}
    for key, name in webcolors.CSS3_HEX_TO_NAMES.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_colour[0]) ** 2
        gd = (g_c - requested_colour[1]) ** 2
        bd = (b_c - requested_colour[2]) ** 2
        min_colours[(rd + gd + bd)] = name
    return min_colours[min(min_colours.keys())]


def get_colour_name(requested_colour):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(requested_colour)
    except ValueError:
        closest_name = closest_colour(requested_colour)
        actual_name = None
    return actual_name, closest_name


def speak(color):
    if status == 0:
        print("here")
        engine.say("This item appears to be " + str(color))
    elif status == 1:
        engine.say("Please move closer")
    else:
        engine.say("Please move farther away")
    engine.runAndWait()


while True:
    if GPIO.input(8) == GPIO.HIGH:
        sys.exit()
    if GPIO.input(10) == GPIO.HIGH:
        photoVal = GPIO.input(14)
        ledVal = (1023 - photoVal) / 1023
        engine.say("Three")
        engine.say("Two")
        engine.say("One")

	if (photoVal < 700)
            GPIO.output(12, ledVal)
        else
            GPIO.output(12, 0)

        camera = cv2.VideoCapture(0)

        for i in range(1):
            return_value, imageggf = camera.read()
            cv2.imwrite('background_image.bmp', imageggf)
            bg = pygame.image.load("background_image.bmp")
        del camera
        print(return_value)
        cv2.imshow("image", imageggf)
        # creates enough delay that the camera has time to update view to show accurate image
        cv2.waitKey(500)

        img1 = cv2.imread('background_image.png')
        img = img1[80:400, 80:560]
        height, width, _ = np.shape(img)
        print(height, width)
        image = img.reshape((height * width, 3))

        num_clusters = 3
        clusters = KMeans(n_clusters=num_clusters)
        clusters.fit(image)

        histogram = make_histogram(clusters)
        combined = zip(histogram, clusters.cluster_centers_)
        combined = sorted(combined, key=lambda x: x[0], reverse=True)

        bars = []
        hsv_values = []
        cols = []
        for index, rows in enumerate(combined):
            bar, rgb, hsv = make_bar(100, 100, rows[1])
            print(f'Bar {index + 1}')
            print(f'  RGB values: {rgb}')
            print(f'  HSV values: {hsv}')
            hsv_values.append(hsv)
            bars.append(bar)
            r = rgb[0]
            g = rgb[1]
            b = rgb[2]
            requested_color = (r, g, b)
            print(requested_color)
            submit_color = get_colour_name(requested_color)
            print(submit_color)
            speak(submit_color[1])
        sorted_bars_indexes = sort_hsvs(hsv_values)
        sorted_bars = [bars[idx] for idx in sorted_bars_indexes]
        cv2.imshow('Sorted by HSV values', np.hstack(sorted_bars))
        cv2.imshow(f'{num_clusters} Most Common Colors', np.hstack(bars))
        cv2.waitKey(500)
        print()
        print()
        print()
        GPIO.output(12, 0)


camera.release()
cv2.destroyAllWindows()
del camera
